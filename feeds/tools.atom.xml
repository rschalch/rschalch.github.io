<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rschalch's</title><link href="https://rschalch.github.io/" rel="alternate"></link><link href="https://rschalch.github.io/feeds/tools.atom.xml" rel="self"></link><id>https://rschalch.github.io/</id><updated>2016-11-07T00:00:00-02:00</updated><entry><title>Jupyter Notebook</title><link href="https://rschalch.github.io/jupyter-notebook.html" rel="alternate"></link><published>2016-11-07T00:00:00-02:00</published><updated>2016-11-07T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-07:jupyter-notebook.html</id><summary type="html">&lt;h2&gt;O que são&amp;nbsp;notebooks?&lt;/h2&gt;
&lt;p&gt;Nos meus primeiros dias com Python comecei usando o terminal rodando o interpretador. Imprimia umas mensagens, concatenava variáveis, construia listas e dicionários, aquelas coisas todas de quem está descobrindo os ifs e elses de uma linguagem. Logo após passei para os editores, escrevendo scripts mais complexos e criando projetos apenas para experimentar a standard library e algumas bibliotecas. Algo de errado com isso? Absolutamente, é o processo pelo qual todo mundo inicia. No entanto, meu aprendizado poderia ter sido muito mais rápido e efetivo se eu tivesse conhecido os notebooks, uma das mais poderosas ferramentas da plataforma&amp;nbsp;Python!&lt;/p&gt;
&lt;p&gt;Notebooks são arquivos nos quais armazenamos não apenas código, mas também ricas anotações que podem nos ajudar a documentar nosso scripts com texto, links, imagens, etc. Os notebooks são muito usados na área de ciência e análise de dados pois permitem a medição da performance de um script, armazenagem de resultados, apresentação de gráficos, além de muitos outros&amp;nbsp;recursos.&lt;/p&gt;
&lt;p&gt;O estranho é que o próprio site do desenvolvedor não deixa muito claras as vantagens que essa ferramenta tem para os iniciantes, por isso resolvi escrever esse post. Fala-se muito lá em data science, data analysis, mas infelizmente pecam por não fazerem uma introdução amigável a respeito! Bom, chega de filosofia, vamos à&amp;nbsp;prática!&lt;/p&gt;
&lt;p&gt;Os criadores do Jupyter Notebook recomendam fortemente a instalação do pacote &lt;a href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt;, uma distribuição Python que vem com muitas bibliotecas e ferramentas integradas em um único pacote otimizado para desenvolvimento em data science. Vou escrever sobre esse pacote no futuro, mas como é uma distro um pouco pesada para os nossos propósitos, vamos de &lt;a href="https://rschalch.github.io/python-pip.html" title="Gerenciador de Pacotes Python"&gt;&lt;span class="caps"&gt;PIP&lt;/span&gt;&lt;/a&gt; mesmo&amp;nbsp;;)&lt;/p&gt;
&lt;h2&gt;Instalando e iniciando o Jupyter&amp;nbsp;Notebook&lt;/h2&gt;
&lt;p&gt;Em primeiro lugar é uma boa idéia fazer o upgrade do gerenciador de pacotes pip, pois o Jupyter tem uma quantidade grande de&amp;nbsp;dependências.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip3 install --upgrade pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A instalação é&amp;nbsp;simples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip3 install jupyter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para rodar o Jupyter o comando mais óbvio&amp;nbsp;possível:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jupyter-notebook
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conceitos&lt;/h2&gt;</summary><category term="tools"></category><category term="notebooks"></category></entry><entry><title>PIP - Gerenciador de Pacotes Python</title><link href="https://rschalch.github.io/python-pip.html" rel="alternate"></link><published>2016-11-05T00:00:00-02:00</published><updated>2016-11-05T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-05:python-pip.html</id><summary type="html">&lt;h2&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;&lt;span class="caps"&gt;PIP&lt;/span&gt; Installs Packages&amp;nbsp;&amp;#8230;&amp;#8221;&lt;/h2&gt;
&lt;p&gt;&amp;#8230; Ou &amp;#8220;&lt;span class="caps"&gt;PIP&lt;/span&gt; Installs Python&amp;#8221;, é um acrônimo recursivo para o gerenciador de pacotes mais usado na plataforma. Ele usa como fonte principal o &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; (também conhecido como &amp;#8220;Cheese Shop&amp;#8221;) o principal respositório de pacotes Python usado pela comunidade. A quantidade de pacotes encontrado no PyPI é imensa, mais de 86 mil pacotes (ou bibliotecas) que podem ser baixados diretamente usando o &lt;span class="caps"&gt;PIP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Instalar o &lt;span class="caps"&gt;PIP&lt;/span&gt; é muito simples. Primeiro precisamos atualizar o nosso sistema com os updates mais&amp;nbsp;recentes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt -y upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para depois instalarmos o gerenciador &lt;span class="caps"&gt;PIP&lt;/span&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para testarmos se a instalação foi concluída corretamente e checar qual&amp;nbsp;versão: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip -V
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos também pesquisar pacotes nos&amp;nbsp;repositórios:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip search nome_do_pacote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A instalação de pacotes é muito simples, o seguinte comando baixará não apenas o pacote indicado, mas também suas&amp;nbsp;dependências:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install nome_do_pacote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para listarmos os pacotes atualmente&amp;nbsp;instalados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos também criar um arquivo com a referência de todos os pacotes instalados e suas&amp;nbsp;versões. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O arquivo criado acima permitirá ao &lt;span class="caps"&gt;PIP&lt;/span&gt; instalar novamente esses mesmos pacotes de uma só&amp;nbsp;vez:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A desinstalação de pacotes é feita da seguinte&amp;nbsp;forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip uninstall nome_do_pacote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para saber mais sobre suas&amp;nbsp;funções:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip --help
&lt;/pre&gt;&lt;/div&gt;</summary><category term="tools"></category><category term="pip"></category></entry><entry><title>Ambientes Virtuais (virtualenv)</title><link href="https://rschalch.github.io/ambientes-virtuais-virtualenv.html" rel="alternate"></link><published>2016-11-04T00:00:00-02:00</published><updated>2016-11-04T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-04:ambientes-virtuais-virtualenv.html</id><summary type="html">&lt;h2&gt;Conceito e importância dos ambientes&amp;nbsp;virtuais&lt;/h2&gt;
&lt;p&gt;Virtualenvs são ambientes Python isolados dentro do sistema. Muitas distribuições Linux vem com uma instalação Python padrão e atualmente a mais usada é a 2.7. Acontece que nem sempre essa instalação é a mais apropriada para nossos projetos. Ainda mais hoje que vivemos em plena transição para o Python 3. E quando cada um de nossos projetos precisa de uma versão diferente do Python ou de suas bibliotecas? Ainda, e se o ambiente de produção possui uma versão&amp;nbsp;específica?&lt;/p&gt;
&lt;p&gt;Para qualquer desenvolvedor isso seria uma situação muito complicada, tanto a nível de desenvolvimento, organização ou mesmo em se tratando de depuração de erros e testes. Claro que uma plataforma avançada e robusta como a nossa não deixaria de ter uma solução elegante para esses tipos de problemas. Apresentamos os ambientes virtuais, mais conhecidos como&amp;nbsp;&amp;#8220;virtualenvs&amp;#8221;.&lt;/p&gt;
&lt;h2&gt;1. Instalando o pacote&amp;nbsp;virtualenv&lt;/h2&gt;
&lt;p&gt;O Python possui uma biblioteca específica para a criação desses ambientes separados e para instalar esse pacote&amp;nbsp;basta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. Criando o ambiente&amp;nbsp;virtual&lt;/h2&gt;
&lt;p&gt;Agora que o pacote virtualenv foi instalado podemos começar a criar ambientes virtuais. É possível instalar ambientes em qualquer parte do nosso sistema, mas existem duas práticas mais usadas: Instalar no mesmo diretório do projeto ou ter uma pasta específica do sistema para armazená-los. Vamos criar um ambiente virtual com uma instalação para Python 3 dentro do diretório do nosso projeto, em uma pasta chamada &amp;#8220;venv&amp;#8221; (pode-se dar qualquer nome para ela, mas com a boa prática de evitar maiúsculas, caracteres especiais e&amp;nbsp;espaços)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; pasta_do_meu_projeto
$ virtualenv -p usr/bin/python3 venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O último comando acima é explicado da seguinte forma: usando o comando virtualenv e a opção &lt;code&gt;-p&lt;/code&gt; para especificar qual interpretador python (no caso o Python 3 que está localizado em usr/bin/python3), crie o ambiente virtual chamado&amp;nbsp;&amp;#8220;venv&amp;#8221;&lt;/p&gt;
&lt;h2&gt;3. Ativando o ambiente&amp;nbsp;virtual&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Importante&lt;/strong&gt;: antes de começar a trabalhar nesse ambiente precisamos ativá-lo com o seguinte&amp;nbsp;comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Instalando bibliotecas dentro do&amp;nbsp;ambiente&lt;/h2&gt;
&lt;p&gt;Temos um ambiente instalado, ativado e pronto para uso! Vamos agora usar o &lt;a href="https://rschalch.github.io/python-pip.html" title="Gerenciador de Pacotes Python"&gt;&lt;span class="caps"&gt;PIP&lt;/span&gt;&lt;/a&gt; para instalar a biblioteca requests que viverá apenas dentro desse&amp;nbsp;ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install requests
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5. Desativando o&amp;nbsp;ambiente&lt;/h2&gt;
&lt;p&gt;Terminamos de trabalhar no projeto, então podemos desativar o ambiente para que ele nao seja poluído com instalações que não sejam pertinentes a&amp;nbsp;ele:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para excluir o ambiente definitivamente basta deletarmos a pasta venv pois tudo que foi instalado está dentro&amp;nbsp;dela.&lt;/p&gt;
&lt;h2&gt;6.&amp;nbsp;Dicas&lt;/h2&gt;
&lt;p&gt;Existem tarefas comuns que fazem parte da nossa rotina enquanto trabalhamos com os virtualenvs. Os comandos seguintes exigem que o ambiente virtual esteja funcionando (ativado). Por exemplo, para sabermos quais pacotes estão instalados dentro do ambiente, basta&amp;nbsp;digitarmos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outra coisa bastante comum é criar um arquivo chamado requirements.txt, o qual especifica quais são as bibliotecas que estão instaladas no ambiente. Criar esse arquivo é muito&amp;nbsp;fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim, quando outra pessoa do time for replicar o ambiente em sua máquina, tudo que ela precisará fazer é criar esse ambiente e instalar as bibliotecas que ele exige com o seguinte&amp;nbsp;comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A opção &lt;code&gt;-r&lt;/code&gt; especifica quais são os requerimentos do ambiente, os quais estão listados no arquivo&amp;nbsp;requirements.txt.&lt;/p&gt;
&lt;p&gt;Esse artigo foi &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;baseado&lt;/a&gt; na documentação&amp;nbsp;oficial. &lt;/p&gt;</summary><category term="tools"></category><category term="virtualenv"></category></entry><entry><title>Como escolher o seu editor</title><link href="https://rschalch.github.io/escolha-seu-editor.html" rel="alternate"></link><published>2016-11-03T00:00:00-02:00</published><updated>2016-11-03T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-03:escolha-seu-editor.html</id><summary type="html">&lt;h2&gt;Simplesmente uma escolha&amp;nbsp;pessoal?&lt;/h2&gt;
&lt;p&gt;Esse assunto nem sempre é tratado com a devida atenção, mas resolvi escrever esse artigo para ajudar os iniciantes (ou talvez aqueles que não estejam satisfeitos o suficiente)a escolherem a sua principal ferramenta de&amp;nbsp;trabalho.&lt;/p&gt;
&lt;p&gt;Quando estava iniciando em programação, muitas pessoas me diziam: &amp;#8220;Deixa isso de lado e parte para o código de uma vez, você tá perdendo tempo com coisas sem importância&amp;#8221;. E isso sempre me soou estranho porque eu sabia que teria de passar provavelmente de 70% a 90% de todas as minhas horas de trabalho junto a essa&amp;nbsp;ferramenta.&lt;/p&gt;
&lt;p&gt;E com o decorrer do tempo comprovei que um bom conjunto de ferramentas aliado a um workflow ágil&amp;nbsp;pode:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduzir o seu tempo de&amp;nbsp;trabalho;&lt;/li&gt;
&lt;li&gt;Diminuir o stress com tarefas repetitivas (que ajudam a criar estafa&amp;nbsp;mental);&lt;/li&gt;
&lt;li&gt;Poupar seu tempo em pesquisas sobre como fazer certas coisas funcionarem&amp;nbsp;direito;&lt;/li&gt;
&lt;li&gt;Te levar a uma maior satisfação por obter resultados mais rápidos, ajudando inclusive nas suas&amp;nbsp;deadlines.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tendo aprendido Python usando todos os famosos editores do mercado, passando por boas e más experiências, analisando as reais necessidades dos meus projetos, posso dizer que os seguintes requisitos são imprescindíveis para essa&amp;nbsp;escolha:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leveza, Estabilidade e&amp;nbsp;Performance&lt;/li&gt;
&lt;li&gt;Ferramentas básicas&amp;nbsp;integradas&lt;/li&gt;
&lt;li&gt;Facilidade de&amp;nbsp;uso&lt;/li&gt;
&lt;li&gt;Constante manutenção da&amp;nbsp;ferramenta&lt;/li&gt;
&lt;li&gt;Boa documentação e exemplos de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Extenso uso pela&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Grande quantidade de&amp;nbsp;plugins&lt;/li&gt;
&lt;li&gt;Preço&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selecionei 4 dos que mais atendem aos quesitos acima e vou resumir seus prós e&amp;nbsp;contras:&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.jetbrains.com/pycharm"&gt;Pycharm&amp;nbsp;(Jetbrains)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Pycharm" src="images/pycharm.png" title="Pycharm" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O mais completo, excelentes ferramentas&amp;nbsp;integradas&lt;/li&gt;
&lt;li&gt;Altamente&amp;nbsp;configurável&lt;/li&gt;
&lt;li&gt;Boa&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Possui versão free (Community&amp;nbsp;Edition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versão completa exige uma subscrição mensal de&amp;nbsp;pagamento&lt;/li&gt;
&lt;li&gt;Muito&amp;nbsp;pesado&lt;/li&gt;
&lt;li&gt;Você precisa ter Java instalado na sua máquina para rodá-lo ( What???&amp;nbsp;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&amp;nbsp;3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Sublime Text 3" src="images/sublime.png" title="Sublime Text 3" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Levíssimo, inicialização quase que&amp;nbsp;instantânea&lt;/li&gt;
&lt;li&gt;Extremamente rápido ao responder comandos (construído com Python e extensões&amp;nbsp;C++)&lt;/li&gt;
&lt;li&gt;Boas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Um dos mais adotados pela&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Grande quantidade de plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não é free (embora possa continuar sendo usado por tempo&amp;nbsp;indeterminado)&lt;/li&gt;
&lt;li&gt;Ambiente Python: configuração levemente complexa e&amp;nbsp;insatisfatória&lt;/li&gt;
&lt;li&gt;Lenta manutenção pelo&amp;nbsp;desenvolvedor&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://atom.io"&gt;Atom)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Atom" src="images/atom.png" title="Atom" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leve&lt;/li&gt;
&lt;li&gt;Boas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Boa quantidade de&amp;nbsp;usuários&lt;/li&gt;
&lt;li&gt;Suporte a plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;li&gt;Gratuito e mantido&amp;nbsp;regularmente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possui bugs antigos e adoção de novas funcionalidades é&amp;nbsp;lenta&lt;/li&gt;
&lt;li&gt;Ambiente Python: muito&amp;nbsp;básico&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio&amp;nbsp;Code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Visual Studio Code" src="images/vscode.png" title="Visual Studio Code" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leve&lt;/li&gt;
&lt;li&gt;Ótimas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Crescente quantidade de&amp;nbsp;usuários&lt;/li&gt;
&lt;li&gt;Suporte a plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;li&gt;Gratuito e de manutenção bem ativa pela&amp;nbsp;Microsoft&lt;/li&gt;
&lt;li&gt;O melhor ambiente Python que encontrei até o momento, possui ótimos plugins para a plataforma que funcionam sem precisar de tantos&amp;nbsp;&amp;#8220;tweaks&amp;#8221;&lt;/li&gt;
&lt;li&gt;Bem&amp;nbsp;documentado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O editor ainda não tem split horizontal, mas já está sendo providenciado pelo&amp;nbsp;desenvolvedor&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tools"></category><category term="editors"></category></entry></feed>