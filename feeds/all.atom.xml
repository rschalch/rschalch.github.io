<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>rschalch's</title><link href="https://rschalch.github.io/" rel="alternate"></link><link href="https://rschalch.github.io/feeds/all.atom.xml" rel="self"></link><id>https://rschalch.github.io/</id><updated>2016-11-24T00:00:00-02:00</updated><entry><title>Zen of Python</title><link href="https://rschalch.github.io/zen-of-python.html" rel="alternate"></link><published>2016-11-24T00:00:00-02:00</published><updated>2016-11-24T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-24:zen-of-python.html</id><summary type="html">&lt;h2&gt;The Zen of&amp;nbsp;Python&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Beautiful is better than&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;Explicit is better than&amp;nbsp;implicit.&lt;/p&gt;
&lt;p&gt;Simple is better than&amp;nbsp;complex.&lt;/p&gt;
&lt;p&gt;Complex is better than&amp;nbsp;complicated.&lt;/p&gt;
&lt;p&gt;Flat is better than&amp;nbsp;nested.&lt;/p&gt;
&lt;p&gt;Sparse is better than&amp;nbsp;dense.&lt;/p&gt;
&lt;p&gt;Readability&amp;nbsp;counts.&lt;/p&gt;
&lt;p&gt;Special cases aren&amp;#8217;t special enough to break the&amp;nbsp;rules.&lt;/p&gt;
&lt;p&gt;Although practicality beats&amp;nbsp;purity.&lt;/p&gt;
&lt;p&gt;Errors should never pass&amp;nbsp;silently.&lt;/p&gt;
&lt;p&gt;Unless explicitly&amp;nbsp;silenced.&lt;/p&gt;
&lt;p&gt;In the face of ambiguity, refuse the temptation to&amp;nbsp;guess.&lt;/p&gt;
&lt;p&gt;There should be one&amp;#8212; and preferably only one &amp;#8212;obvious way to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Although that way may not be obvious at first unless you&amp;#8217;re&amp;nbsp;Dutch.&lt;/p&gt;
&lt;p&gt;Now is better than&amp;nbsp;never.&lt;/p&gt;
&lt;p&gt;Although never is often better than &lt;em&gt;right&lt;/em&gt;&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;If the implementation is hard to explain, it&amp;#8217;s a bad&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;If the implementation is easy to explain, it may be a good&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;Namespaces are one honking great idea &amp;#8212; let&amp;#8217;s do more of&amp;nbsp;those!&lt;/p&gt;</summary><category term="references"></category></entry><entry><title>Como escolher o seu editor</title><link href="https://rschalch.github.io/escolha-seu-editor.html" rel="alternate"></link><published>2016-11-14T00:00:00-02:00</published><updated>2016-11-14T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-14:escolha-seu-editor.html</id><summary type="html">&lt;h2&gt;Simplesmente uma escolha&amp;nbsp;pessoal?&lt;/h2&gt;
&lt;p&gt;Esse assunto nem sempre é tratado com a devida atenção, mas resolvi escrever esse artigo para ajudar os iniciantes (ou talvez aqueles que não estejam satisfeitos o suficiente)a escolherem a sua principal ferramenta de&amp;nbsp;trabalho.&lt;/p&gt;
&lt;p&gt;Quando estava iniciando em programação, muitas pessoas me diziam: &amp;#8220;Deixa isso de lado e parte para o código de uma vez, você tá perdendo tempo com coisas sem importância&amp;#8221;. E isso sempre me soou estranho porque eu sabia que teria de passar provavelmente de 70% a 90% de todas as minhas horas de trabalho junto a essa&amp;nbsp;ferramenta.&lt;/p&gt;
&lt;p&gt;E com o decorrer do tempo comprovei que um bom conjunto de ferramentas aliado a um workflow ágil&amp;nbsp;pode:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reduzir o seu tempo de&amp;nbsp;trabalho;&lt;/li&gt;
&lt;li&gt;Diminuir o stress com tarefas repetitivas (que ajudam a criar estafa&amp;nbsp;mental);&lt;/li&gt;
&lt;li&gt;Poupar seu tempo em pesquisas sobre como fazer certas coisas funcionarem&amp;nbsp;direito;&lt;/li&gt;
&lt;li&gt;Te levar a uma maior satisfação por obter resultados mais rápidos, ajudando inclusive nas suas&amp;nbsp;deadlines.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tendo aprendido Python usando todos os famosos editores do mercado, passando por boas e más experiências, analisando as reais necessidades dos meus projetos, posso dizer que os seguintes requisitos são imprescindíveis para essa&amp;nbsp;escolha:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leveza, Estabilidade e&amp;nbsp;Performance&lt;/li&gt;
&lt;li&gt;Ferramentas básicas&amp;nbsp;integradas&lt;/li&gt;
&lt;li&gt;Facilidade de&amp;nbsp;uso&lt;/li&gt;
&lt;li&gt;Constante manutenção da&amp;nbsp;ferramenta&lt;/li&gt;
&lt;li&gt;Boa documentação e exemplos de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Extenso uso pela&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Grande quantidade de&amp;nbsp;plugins&lt;/li&gt;
&lt;li&gt;Preço&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Selecionei 4 dos que mais atendem aos quesitos acima e vou resumir seus prós e&amp;nbsp;contras:&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.jetbrains.com/pycharm"&gt;Pycharm&amp;nbsp;(Jetbrains)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Pycharm" src="images/pycharm.png" title="Pycharm" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O mais completo, excelentes ferramentas&amp;nbsp;integradas&lt;/li&gt;
&lt;li&gt;Altamente&amp;nbsp;configurável&lt;/li&gt;
&lt;li&gt;Boa&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Possui versão free (Community&amp;nbsp;Edition)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versão completa exige uma subscrição mensal de&amp;nbsp;pagamento&lt;/li&gt;
&lt;li&gt;Muito&amp;nbsp;pesado&lt;/li&gt;
&lt;li&gt;Você precisa ter Java instalado na sua máquina para rodá-lo ( What???&amp;nbsp;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&amp;nbsp;3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Sublime Text 3" src="images/sublime.png" title="Sublime Text 3" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Levíssimo, inicialização quase que&amp;nbsp;instantânea&lt;/li&gt;
&lt;li&gt;Extremamente rápido ao responder comandos (construído com Python e extensões&amp;nbsp;C++)&lt;/li&gt;
&lt;li&gt;Boas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Um dos mais adotados pela&amp;nbsp;comunidade&lt;/li&gt;
&lt;li&gt;Grande quantidade de plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Não é free (embora possa continuar sendo usado por tempo&amp;nbsp;indeterminado)&lt;/li&gt;
&lt;li&gt;Ambiente Python: configuração levemente complexa e&amp;nbsp;insatisfatória&lt;/li&gt;
&lt;li&gt;Lenta manutenção pelo&amp;nbsp;desenvolvedor&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://atom.io"&gt;Atom)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Atom" src="images/atom.png" title="Atom" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leve&lt;/li&gt;
&lt;li&gt;Boas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Boa quantidade de&amp;nbsp;usuários&lt;/li&gt;
&lt;li&gt;Suporte a plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;li&gt;Gratuito e mantido&amp;nbsp;regularmente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Possui bugs antigos e adoção de novas funcionalidades é&amp;nbsp;lenta&lt;/li&gt;
&lt;li&gt;Ambiente Python: muito&amp;nbsp;básico&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio&amp;nbsp;Code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="editor-icon"&gt;&lt;img alt="Visual Studio Code" src="images/vscode.png" title="Visual Studio Code" /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leve&lt;/li&gt;
&lt;li&gt;Ótimas opções de&amp;nbsp;configuração&lt;/li&gt;
&lt;li&gt;Crescente quantidade de&amp;nbsp;usuários&lt;/li&gt;
&lt;li&gt;Suporte a plugins e&amp;nbsp;temas&lt;/li&gt;
&lt;li&gt;Gratuito e de manutenção bem ativa pela&amp;nbsp;Microsoft&lt;/li&gt;
&lt;li&gt;O melhor ambiente Python que encontrei até o momento, possui ótimos plugins para a plataforma que funcionam sem precisar de tantos&amp;nbsp;&amp;#8220;tweaks&amp;#8221;&lt;/li&gt;
&lt;li&gt;Bem&amp;nbsp;documentado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Contras&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O editor ainda não tem split horizontal, mas já está sendo providenciado pelo&amp;nbsp;desenvolvedor&lt;/li&gt;
&lt;/ul&gt;</summary><category term="tools"></category><category term="editors"></category></entry><entry><title>Django - Aula 01 - Introdução</title><link href="https://rschalch.github.io/django-framework-aula-01-introducao.html" rel="alternate"></link><published>2016-11-11T00:00:00-02:00</published><updated>2016-11-11T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-11:django-framework-aula-01-introducao.html</id><summary type="html">&lt;h2&gt;Introdução à&amp;nbsp;framework&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Django é a principal e mais conhecida framework Python para web nos dias atuais. Sua filosofia é baseada em &lt;abbr title="Rapid Application Development"&gt;&lt;span class="caps"&gt;RAD&lt;/span&gt;&lt;/abbr&gt;, um conceito muito importante no mundo do desenvolvimento de&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;Suas características&amp;nbsp;são:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Baixo acoplamento&lt;/strong&gt;: As várias camadas da framework não devem conhecer sobre o funcionamento de outras, a menos que absolutamente necessário. Esse tipo de modelo permite alto grau de modularização e expansão já que cada parte é independente. Assim, futuras mudanças na aplicação serão mais seguras, já que o risco de uma parte interferir com a outra é&amp;nbsp;mínimo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Menos código&lt;/strong&gt;: Django utiliza todo o poder dinâmico da linguagem Python, assim alcançamos grandes resultados escrevendo pouquíssimo&amp;nbsp;código.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rápido desenvolvimento&lt;/strong&gt;: A framework permite que ultrapassemos muitas tarefas tediosas no ciclo da construção de uma aplicação, um exemplo disso é a geração automática de um sistema de administração baseada nos modelos de dados que criamos. Apenas com essa caractérística podemos construir um sistema &lt;abbr title="Create, Read, Update and Delete"&gt;&lt;span class="caps"&gt;CRUD&lt;/span&gt;&lt;/abbr&gt; em poucos&amp;nbsp;minutos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Não repetição&lt;/strong&gt;: Cada conceito ou parte de código deverá existir em um único lugar apenas, eliminando redundâncias. A idéia é reduzir ao máximo o trabalho de alterações dentro do software e fazê-lo mais conciso e&amp;nbsp;inteligente.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="django"></category><category term="python"></category><category term="web"></category></entry><entry><title>Requests</title><link href="https://rschalch.github.io/requests.html" rel="alternate"></link><published>2016-11-11T00:00:00-02:00</published><updated>2016-11-11T00:00:00-02:00</updated><author><name>Ricardo Bürger Schalch</name></author><id>tag:rschalch.github.io,2016-11-11:requests.html</id><summary type="html">&lt;h2&gt;Requests&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Em&amp;nbsp;breve!&lt;/p&gt;</summary><category term="python"></category><category term="requests"></category></entry></feed>