{
    "pages": [
        {
            "title": "Como escolher o seu editor", 
            "text":"Simplesmente uma escolha pessoal? Esse assunto nem sempre é tratado com a devida atenção, mas resolvi escrever esse artigo para ajudar os iniciantes (ou talvez aqueles que não estejam satisfeitos o suficiente)a escolherem a sua principal ferramenta de trabalho. Quando estava iniciando em programação, muitas pessoas me diziam: “Deixa isso de lado e parte para o código de uma vez, você tá perdendo tempo com coisas sem importância”. E isso sempre me soou estranho porque eu sabia que teria de passar provavelmente de 70% a 90% de todas as minhas horas de trabalho junto a essa ferramenta. E com o decorrer do tempo comprovei que um bom conjunto de ferramentas aliado a um workflow ágil pode: Reduzir o seu tempo de trabalho; Diminuir o stress com tarefas repetitivas (que ajudam a criar estafa mental); Poupar seu tempo em pesquisas sobre como fazer certas coisas funcionarem direito; Te levar a uma maior satisfação por obter resultados mais rápidos, ajudando inclusive nas suas deadlines. Tendo aprendido Python usando todos os famosos editores do mercado, passando por boas e más experiências, analisando as reais necessidades dos meus projetos, posso dizer que os seguintes requisitos são imprescindíveis para essa escolha: Leveza, Estabilidade e Performance Ferramentas básicas integradas Facilidade de uso Constante manutenção da ferramenta Boa documentação e exemplos de configuração Extenso uso pela comunidade Grande quantidade de plugins Preço Selecionei 4 dos que mais atendem aos quesitos acima e vou resumir seus prós e contras: Pycharm (Jetbrains) Pros O mais completo, excelentes ferramentas integradas Altamente configurável Boa comunidade Possui versão free (Community Edition) Contras Versão completa exige uma subscrição mensal de pagamento Muito pesado Você precisa ter Java instalado na sua máquina para rodá-lo ( What??? ) Sublime Text 3 Pros Levíssimo, inicialização quase que instantânea Extremamente rápido ao responder comandos (construído com Python e extensões C++) Boas opções de configuração Um dos mais adotados pela comunidade Grande quantidade de plugins e temas Contras Não é free (embora possa continuar sendo usado por tempo indeterminado) Ambiente Python: configuração levemente complexa e insatisfatória Lenta manutenção pelo desenvolvedor Atom) Pros Leve Boas opções de configuração Boa quantidade de usuários Suporte a plugins e temas Gratuito e mantido regularmente Contras Possui bugs antigos e adoção de novas funcionalidades é lenta Ambiente Python: muito básico Visual Studio Code Pros Leve Ótimas opções de configuração Crescente quantidade de usuários Suporte a plugins e temas Gratuito e de manutenção bem ativa pela Microsoft O melhor ambiente Python que encontrei até o momento, possui ótimos plugins para a plataforma que funcionam sem precisar de tantos “tweaks” Bem documentado Contras O editor ainda não tem split horizontal, mas já está sendo providenciado pelo desenvolvedor", 
            "tags": "Tools", 
            "loc": "https://rschalch.github.io/escolha-seu-editor.html"
        },
        {
            "title": "Django - Aula 02 - Criando o projeto", 
            "text":"Criando seu primeiro projeto Django Agora que conhecemos um pouquinho sobre a framework é hora de botar a mão na massa! Antes porém, é necessário preencher alguns requisitos do sistema: Controle de versão: Vamos usar o GIT para essa finalidade, então certifique-se de que ele esteja instalado na sua máquina. Não conhece ou não sabe o que é GIT ainda? Urgente, atualize-se porque saber trabalhar com GIT é uma exigência na nossa área! Um bom tutorial pode ser achado aqui. Ambiente virtual: Para que tenhamos um ambiente específico para cada projeto que criamos precisamos criar o chamado “virtualenv”. As vantagens de se trabalhar em um ambiente assim são as seguintes: Nosso projeto contará com uma versão específica do Python, com bibliotecas pertinentes apenas ao nosso projeto. Além do mais podemos compartilhar o ambiente com outras pessoas e nos certificando que todos trabalhem com as mesmas versões da linguagem e das bibliotecas instaladas. Isso diminui bastante alguns contra-tempos comuns quando desenvolvemos com times. Para entender um pouco mais sobre ambientes virtuais clique aqui.", 
            "tags": "Django", 
            "loc": "https://rschalch.github.io/django-framework-aula-02-criando-projeto.html"
        },
        {
            "title": "Django - Aula 01 - Introdução", 
            "text":"Introdução à framework Django é a principal e mais conhecida framework Python para web nos dias atuais. Sua filosofia é baseada em RAD, um conceito muito importante no mundo do desenvolvimento de software. Suas características são: Baixo acoplamento: As várias camadas da framework não devem conhecer sobre o funcionamento de outras, a menos que absolutamente necessário. Esse tipo de modelo permite alto grau de modularização e expansão já que cada parte é independente. Assim, futuras mudanças na aplicação serão mais seguras, já que o risco de uma parte interferir com a outra é mínimo. Menos código: Django utiliza todo o poder dinâmico da linguagem Python, assim alcançamos grandes resultados escrevendo pouquíssimo código. Rápido desenvolvimento: A framework permite que ultrapassemos muitas tarefas tediosas no ciclo da construção de uma aplicação, um exemplo disso é a geração automática de um sistema de administração baseado nos modelos de dados que criamos. Apenas com essa caractérística podemos construir um sistema CRUD em poucos minutos. Não repetição: Cada conceito ou parte de código deverá existir em um único lugar apenas, eliminando redundâncias. A idéia é reduzir ao máximo o trabalho de alterações dentro do software e fazê-lo mais conciso e inteligente. No decorrer desse curso introdutório vamos desenvolver uma simple aplicação CRUD para ajudar quem está começando a se familiarizar com os conceitos fundamentais do Django!", 
            "tags": "Django", 
            "loc": "https://rschalch.github.io/django-framework-aula-01-introducao.html"
        },
        {
            "title": "Requests", 
            "text":"Requests Em breve!", 
            "tags": "Libraries", 
            "loc": "https://rschalch.github.io/requests.html"
        },
        {
            "title": "Zen do Python", 
            "text":"Sobre a PEP 20 Tim Peters criou essa PEP que é uma coleção de 20 princípios (embora apenas 19 estejam descritos) que influenciam o design da linguagem. Você também pode ter acesso a eles digitando import this em qualquer terminal rodando o interpretador Python. Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren&#39;t special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you&#39;re Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it&#39;s a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let&#39;s do more of those!", 
            "tags": "References", 
            "loc": "https://rschalch.github.io/zen-python.html"
        },
        {
            "title": "Sobre este blog", 
            "text":"Olá meu nome é Ricardo e sou desenvolvedor web há 13 anos. Se estiver com tempo, paciência e curiosidade o suficiente para querer saber mais, clique aqui! Trabalhei com muitas tecnologias. Não sou nenhum expert, mas posso te ajudar a começar! Meu objetivo aqui é simples: Fazer você ler menos e alcançar mais! Ser uma referẽncia e um guia rápido para todos os que estão começando com Python. Reunir o máximo de matérias para ajudar iniciantes a se sentirem confortáveis com a plataforma e suas ferramentas o mais simples e rapidamente possível. Sendo assim, esse blog não pretende ser um guia completo e definitivo para os tópicos aqui apresentados. Se desejar conhecê-los a fundo consulte suas fontes ou documentações originais. Sempre me deparei com ótimas referências, mas algumas pecavam pelo excesso de informação inútil, falta de clareza e também a falta de cuidado com a percepção de que nem todos os leitores estão familiarizados com tantas tecnologias. Então vou fazer o máximo para que ninguém aqui se sinta perdido nas matérias! Qualquer dúvida ou sugestão por favor me contate e te retornarei o mais rápido possível!", 
            "tags": "main", 
            "loc": "https://rschalch.github.io/pages/sobre-este-blog.html"
        },
        {
            "title": "Contato", 
            "text":"Send var contactform = document.getElementById(&#39;contactform&#39;); contactform.setAttribute(&#39;action&#39;, &#39;//formspree.io/&#39; + &#39;ricardo.schalch&#39; + &#39;@&#39; + &#39;gmail&#39; + &#39;.&#39; + &#39;com&#39;);", 
            "tags": "pages", 
            "loc": "https://rschalch.github.io/pages/contato.html"
        }        
    ]
}